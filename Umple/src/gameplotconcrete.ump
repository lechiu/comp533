class StartPoint
{
	0..1 startPoint -> 0..1 Condition precondition;
	1 startPoint -- * InBinding inBindings;
    1 startPoint -> 1 BlackCircle;
  
	isA StoryLineNode;
}

class Condition
{
	expression;
  1 Condition -> 1 ConcreteCondition;
  1 Condition -> 1 Label;
}

class InBinding
{
	
}

class Binding
{
	1 -- * InBinding inBindings;
	1 -- * OutBinding outBindings;
	autounique bindingId;
}

class OutBinding
{
	
}

class EndPoint
{
	1 Endpoint -- * OutBinding outBindings;
	1 Endpoint -> 0..1 Condition postcondition;
	isA StoryLineNode;
}

class OpenEndPoint
{
	1 OpenendPoint -> 1 WhiteCircle;
	isA EndPoint;
}

class Mission
{
	1 Mission -> * Binding bindings;
	1 Mission -- 1 ReturnPoint returnPoint;
	1 -- 1 Diamond;
	isA StoryLineNode;
	description;
	Boolean isDynamic = false; 
}

class ReturnPoint
{
	isA StoryLineNode;
}

class Trigger
{
	1 trigger -- 1 Mission mission;
	1 -- 1 BlackTriangle;
	isA StoryLineNode;
}

class ChoicePoint
{
	1 ChoicePoint ->  1 BlueCircle;
	isA StoryLineNode;
}

class ChoicePoinJoin
{
	isA StoryLineNode;
}

class MissionTask
{
	1 MissionTask -> 1 XSymbol;
	isA StoryLineNode;
}

class ParallelFork
{
	1 ParallelFork -> 1 BarOrthonanolLine;
	isA StoryLineNode;
}

class StoryLineNode
{
	1 target -- * StoryLineNodeConnection predecessor;
	1 source -- * StoryLineNodeConnection successor;
	1  -> 1 Position;
    1 -> Label;
	autounique storyLineNodeid;
}

class StoryLineNodeConnection
{
	1 StoryLineNodeConnection -> 1 SolidLine;
	1 StoryLineNodeConnection -> 1 Position;
	autounique storyLineNodeConnectionId;	
}

class BlackCircle
{
  Integer size;
  String colour;
  }

class ConcreteCondition
{
  label;
  description;
}

class Diamond{
	Integer size;
	colour = "black";
}

class BlackTriangle{
	Integer size;
	colour = "black";
}

class Position{
	Integer x;
	Integer y;
}

class SolidLine{
	colour = "black";
}

class WhiteCircle{
	Integer size;
	colour = "white";
}

class BlueCircle{
	Integer size;
	colour = "blue";
}

class XSymbol{
}

class BarOrthonanolLine{
}

class Label{
	description;
	Integer xPosition;
	Integer yPosition;
}

