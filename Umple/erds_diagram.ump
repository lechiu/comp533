// Class Diagram of ERDS
class ERDS{
  	1 -- * Organization;	
  	1 -- * Community;
  	1 -- * TransportationCompany;
  	1 -- * Emergency;
  	1 -- * Resource;
  	1 -- * Transport;
}

class Organization{
	1 -- * ResourceEntity;
	autounique organizationId;
	name;
	before setName {
		if (aName == null) 
		{
			return false;
		}
	} 
	location;
	before setLocation {
		if (aLocation == null) 
		{
			return false;
		}
	} 
	String toString() {
		return("id=" + organizationId + ", name=" + name + ", location=" + location);
	}
}

class Charity{
  	isA Organization;
  	String toString() {
		return(super.toString() + ", type=Charity");
	}
}

class GovernmentalOrganization{
  	isA Organization;
  	String toString() {
		return(super.toString() + ", type=GovernmentalOrg");
	}
}

class TransportationCompany{
  	1 -- * TransportEntity;
  	name;
  	autounique tranporationCompanyId;
  	before setName {
		if (aName == null) 
		{
			return false;
		}
	} 
	String toString() {
		return("id=" + tranporationCompanyId + ", name=" + name);
	}
}

class Transport {
     1 -- * TransportEntity;
     autounique transportId; 
    Date startDate;
	before setStartDate {
		if(aStartDate == null)
		{
			return false;
		}
		if(aStartDate.after(this.getEndDate()))
		{
			return false;
		}
	}
	Date endDate;
	before setEndDate {
		if (aEndDate == null)
		{
			return false;
		}
		if(aEndDate.before(this.getStartDate()))
		{
			return false;
		}
	}
  	Double weightCapacity;
	before setWeightCapacity {
		if (aWeightCapacity < 0 || aWeightCapacity > 1000) 
		{
			return false;
		}
	}   	
  	Double spaceCapacity;
	before setSpaceCapacity {
		if (aSpaceCapacity < 0 || aSpaceCapacity > 100) 
		{
			return false;
		}
	} 
  	Double rangeRadius;
	before setRangeRadius {
		if (aRangeRadius < 0) 
		{
			return false;
		}
		if (this.getTransportType().equals("Land") && aRangeRadius > 8000) {
			return false;
		}
		else if (this.getTransportType().equals("Sea")&& aRangeRadius > 18662) {
			return false;
		}
		else if (this.getTransportType().equals("Air")&& aRangeRadius > 12524) {
			return false;
		}
	}
	transportType;
	before setTransportType{
		if(!aTransportType.equals("Land") && !aTransportType.equals("Air") && !aTransportType.equals("Sea"))
		{
			return false;
		}
	} 
	String toString() {
		return("id=" + transportId + ", start_date=" + startDate + ", end_date=" + endDate 
				+ ", space_capacity=" + spaceCapacity + ", weight_capacity=" + weightCapacity + ", range_radius=" + rangeRadius);
	}
}

// Weight capacity is measured in kilogram, range radius is measured in kilometers.
class TransportEntity{
	* transportMatchedTo -- 0..1 Emergency;
    0..1 -> * ResourceEntity;
	autounique entityId;
	String toString() {
		return("transport_id=" + getTransport().getTransportId() + ", entity_id=" + entityId);
	}
 	
}

class Community{
	1 -- * Emergency;
  	name;
  	autounique communityId;
  	before setName {
  		if (aName == null)
  		{
  			return false;
  		}
  	}
  	String toString() {
		return("id=" + communityId + ", name=" + name);
	}
}

class Emergency{
	1 -- * Request;
	autounique emergencyId;
	location;
	Integer numberOfTrucks;
    Integer numberOfShips;
    Integer numberOfAicrafts;
  	before setLocation {
  		if (aLocation == null)
  		{
  			return false;
  		}
  	}
  	before setNumberOfTrucks {
  		if (aNumberOfTrucks < 0)
  		{
  			return false;
  		}
  	}
  
    before setNumberOfShips {
  		if (aNumberOfShips < 0)
  		{
  			return false;
  		}
  	}
    
    before setNumberOfAircrafts {
  		if (aNumberOfAircrafts < 0)
  		{
  			return false;
  		}
  	}
	Boolean isResolved = false;
	String toString() {
		return("emergency_id=" + emergencyId + ", location=" + location + ", is_resolved=" + isResolved
				+ ", community_id=" + getCommunity().getCommunityId() 
				+ ", number_of_trucks:" + numberOfTrucks
		  	 	+ ", number_of_ships:" + numberOfShips
		  	 	+ ", number_of_aircrafts:" + numberOfAicrafts);
	}
}

class Request {
	autounique requestId;
    description;
    Integer quantityNeeded;
	before setDescription {
  		if (aDescription == null)
  		{
  			return false;
  		}
  	}

	String toString() {
		return("request_id=" + requestId+ ", description=" + description + ", quantity_needed:" + quantityNeeded);
	}
}

class Resource {
    1 -- * ResourceEntity;
    autounique resourceId;
	Boolean isReusable; 
  	String toString() {
		return("resource_id=" + resourceId + ", is_reusable=" + isReusable);
	}
}

class ResourceEntity{
	* resourceMatchedTo -- 0..1 Request;
    autounique entityId;
    Boolean isAvailable = true;
    Boolean isDelivered = false;
    String toString() {
		return(super.toString() + ", entity_id=" + entityId + ", is_available" + isAvailable + ", is_delivered=" + isDelivered);
	}
}

class HumanPersonnel
{
    isA Resource;
	name;
	before setName {
  		if (aName == null)
  		{
  			return false;
  		}
  	}
  	Integer age;
	before setAge {
  		if (aAge < 18 && aAge > 42)
  		{
  			return false;
  		}
  	}  	
  	char gender;
	before setGender {
  		if (aGender != 'M' || aGender != 'F')
  		{
  			return false;
  		}
  	}    	
  	description;
	before setDescription {
  		if (aDescription == null)
  		{
  			return false;
  		}
  	}
  	String toString() {
		return(super.toString() + ", type=HumanPersonnel"
		+ ", name=" + name + ", age=" + age + ", gender=" + gender + ", description=" + description);
	}
}

class PackagedGoods
{
    isA Resource;
	Integer quantityOfUnits;
	before setQuantityOfUnits {
  		if (aQuantityOfUnits < 0)
  		{
  			return false;
  		}
  	}  		
	Double length;
	before setLength {
  		if (aLength <= 0)
  		{
  			return false;
  		}
  	} 	
	Double width;
	before setWidth {
  		if (aWidth <= 0)
  		{
  			return false;
  		}
  	} 	
	Double height;
	before setHeight {
  		if (aHeight <= 0)
  		{
  			return false;
  		}
  	} 		
  	Double weight;
	before setWeight {
  		if (aWeight <= 0 || aWeight > 150)
  		{
  			return false;
  		}
  	} 	  	
  	description;
	before setDescription {
  		if (aDescription == null)
  		{
  			return false;
  		}
  	}     	
  	String toString() {
		return(super.toString() + ", type=PackagedGoods"
				+ ", quantity_of_units=" + quantityOfUnits + ", length=" + length + ", width=" + width 
				+ ", height=" + height + ", weight=" + weight
				+ ", description=" + description);
	}
}

//Resource State Machine
class ResourceEntity {
	sm {
		
        waitingForEmergency {
          assignedToEmergency/{isAvailable = false;} -> waitingToBeScheduled;
		}
		
		waitingToBeScheduled {
			assignedToTransport -> scheduledForDelivery;
		}
        
        scheduledForDelivery {
            loadedToTransport -> onTheWay;
        }
		
		onTheWay {
          arrivedAtLocation/{isDelivered = true;} -> arrived;
		}
		
		arrived {
			finished[getResource().getIsReusable()] -> waitingForTransportBack;
			finished[!getResource().getIsReusable()] -> done;			
		}
		
		waitingForTransportBack {
			loadedToTransport -> onRouteBack;
		}
		
		onRouteBack {
			arrivedAtLocation -> waitingForEmergency;
		}
		
		done {
		}
	}
}

//Emergency State Machine

class Emergency {
	sm {
		initialize {
			localCommunitiesSubmitNeeds -> waitingForNeeds;
        }
      	waitingForNeeds {
           needAdded -> waitingForNeeds;
           completedNeeds -> waitingForMatch;
		}
   
		waitingForMatch {
           resourcesMatched -> prepareDelivery;
        }
		prepareDelivery {
			loadedToTransport -> resourcesOnRoute;
        }
		resourcesOnRoute {
     		arrived ->onLocation;
     	}
		onLocation {
  			emergencyResolved/{isResolved = true;} -> done;
            needMoreResources -> waitingForNeeds;
        }
   		done {
   		}
   	}
}
                
                //$?[End_of_model]$?

class ERDS
{
  position 50 30 109 45;
  position.association Community__ERDS 110,16 0,10;
  position.association ERDS__Emergency 110,19 0,10;
  position.association ERDS__Resource 110,13 0,10;
  position.association ERDS__Transport 110,10 0,10;
}

class Organization
{
  position 50 130 109 45;
  position.association Organization__ResourceEntity 110,13 0,10;
}

class Charity
{
  position 50 230 109 45;
}

class GovernmentalOrganization
{
  position 50 330 109 45;
}

class TransportationCompany
{
  position 50 430 109 45;
}

class Transport
{
  position 250 30 109 45;
}

class TransportEntity
{
  position 250 130 109 45;
  position.association ResourceEntity__TransportEntity 113,16 0,10;
}

class Community
{
  position 250 230 109 45;
}

class Emergency
{
  position 250 330 109 45;
}

class Request
{
  position 250 430 109 45;
}

class Resource
{
  position 450 230 109 45;
}

class ResourceEntity
{
  position 450 330 109 45;
  position.association Request__ResourceEntity:resourceMatchedTo 0,10 110,8;
}

class HumanPersonnel
{
  position 450 430 109 45;
}

class PackagedGoods
{
  position 650 30 109 45;
}